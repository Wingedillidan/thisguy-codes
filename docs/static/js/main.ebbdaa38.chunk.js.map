{"version":3,"sources":["pages/Intro.jsx","App.js","serviceWorker.js","index.js"],"names":["TRANSITION_CLASSNAME","Intro","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","horizontals","generateSpans","transitionClass","animCounter","n","offset","arguments","length","undefined","result","i","push","react","key","_this$state","className","concat","React","App","loaded","_this2","window","addEventListener","setState","_this3","removeEventListener","react_default","a","createElement","Intro_Intro","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8OAKMA,SAAuB,UAERC,cACjB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACTC,YAAaR,EAAKS,cAAc,GAAI,GACpCC,gBAAiBb,EACjBc,YAAa,GANFX,6EASLY,GAGV,IAHuB,IAAVC,EAAUC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAH,EACdG,EAAS,GAENC,EAAI,EAAGA,EAAIN,EAAGM,IACnBD,EAAOE,KAAKC,EAAA,sBAAMC,IAAKH,EAAIL,KAG/B,OAAOI,mCAED,IAAAK,EACiCnB,KAAKI,MAArCC,EADDc,EACCd,YAAaE,EADdY,EACcZ,gBACpB,OACIU,EAAA,qBAAKG,UAAU,YACVpB,KAAKM,cAAc,GACpBW,EAAA,qBAAKG,UAAU,WACXH,EAAA,qBAAKG,UAAU,kBACVpB,KAAKM,cAAc,KAExBW,EAAA,qBAAKG,UAAU,oBACXH,EAAA,2BACAA,EAAA,4BAEJA,EAAA,qBAAKG,UAAU,mBACVpB,KAAKM,cAAc,KAExBW,EAAA,qBAAKG,UAAS,eAAAC,OAAiBd,IAC1BF,IAGTY,EAAA,qBAAKG,UAAU,kBACXH,EAAA,qBAAKG,UAAU,QACXH,EAAA,oBAAIG,UAAU,SAAd,YACAH,EAAA,oBAAIG,UAAU,eAAd,UACAH,EAAA,oBAAIG,UAAU,gBAAd,UACAH,EAAA,oBAAIG,UAAU,UAAd,mBA5CWE,aC2BpBC,qBAzBb,SAAAA,EAAY3B,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAuB,IACjB1B,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAyB,GAAApB,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXoB,QAAQ,GAJO3B,mFAOC,IAAA4B,EAAAzB,KAClB0B,OAAOC,iBAAiB,OAAQ,kBAAMF,EAAKG,SAAS,CAACJ,QAAQ,qDAGxC,IAAAK,EAAA7B,KACnB0B,OAAOI,oBAAoB,OAAQ,kBAAMD,EAAKD,SAAS,CAACJ,QAAQ,uCAKlE,OADiBxB,KAAKI,MAAfoB,OAEGO,EAAAC,EAAAC,cAACC,EAAD,MAEAH,EAAAC,EAAAC,cAAA,mBArBIE,cCIEC,QACW,cAA7BV,OAAOW,SAASC,UAEe,UAA7BZ,OAAOW,SAASC,UAEhBZ,OAAOW,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOV,EAAAC,EAAAC,cAACS,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ebbdaa38.chunk.js","sourcesContent":["import * as React from 'react';\r\n\r\n// Stylings\r\nimport './Intro.scss';\r\n\r\nconst TRANSITION_CLASSNAME = 'active';\r\n\r\nexport default class Intro extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            horizontals: this.generateSpans(25, 1),\r\n            transitionClass: TRANSITION_CLASSNAME,\r\n            animCounter: 1\r\n        }\r\n    }\r\n    generateSpans(n, offset=0) {\r\n        const result = [];\r\n\r\n        for (let i = 0; i < n; i++) {\r\n            result.push(<span key={i + offset} />);\r\n        }\r\n\r\n        return result;\r\n    }\r\n    render () {\r\n        const {horizontals, transitionClass} = this.state;\r\n        return (\r\n            <div className=\"backdrop\">\r\n                {this.generateSpans(3)}\r\n                <div className=\"horizon\">\r\n                    <div className=\"verticals-left\">\r\n                        {this.generateSpans(12)}\r\n                    </div>\r\n                    <div className=\"verticals-center\">\r\n                        <span />\r\n                        <span />\r\n                    </div>\r\n                    <div className=\"verticals-right\">\r\n                        {this.generateSpans(12)}\r\n                    </div>\r\n                    <div className={`horizontals ${transitionClass}`}>\r\n                        {horizontals}\r\n                    </div>\r\n                </div>\r\n                <div className=\"text-container\">\r\n                    <div className=\"text\">\r\n                        <h1 className=\"title\">THIS GUY</h1>\r\n                        <h3 className=\"desc-1-left\">mentor</h3>\r\n                        <h3 className=\"desc-1-right\">devops</h3>\r\n                        <h3 className=\"desc-2\">codes</h3>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\n// Components\r\nimport Intro from './pages/Intro';\r\n\r\n// Styles\r\nimport './App.scss';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      loaded: false\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    window.addEventListener('load', () => this.setState({loaded: true}));\r\n  }\r\n\r\n  componentWillUnmount() {\r\n      window.removeEventListener('load', () => this.setState({loaded: true}));\r\n  }\r\n\r\n  render() {\r\n    const {loaded} = this.state;\r\n    if (loaded) {\r\n      return (<Intro />);\r\n    } else {\r\n      return (<div />);\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}