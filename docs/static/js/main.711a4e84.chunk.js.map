{"version":3,"sources":["pages/Intro.jsx","App.js","serviceWorker.js","index.js"],"names":["TRANSITION_CLASSNAME","Intro","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","horizontals","generateSpans","transitionClass","animCounter","n","offset","arguments","length","undefined","result","i","push","react","key","_this$state","className","concat","React","App","loaded","_this2","window","addEventListener","setState","_this3","removeEventListener","react_default","a","createElement","Intro_Intro","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8OAKMA,SAAuB,UAERC,cACjB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACTC,YAAaR,EAAKS,cAAc,GAAI,GACpCC,gBAAiBb,EACjBc,YAAa,GANFX,6EASLY,GAGV,IAHuB,IAAVC,EAAUC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAH,EACdG,EAAS,GAENC,EAAI,EAAGA,EAAIN,EAAGM,IACnBD,EAAOE,KAAKC,EAAA,sBAAMC,IAAKH,EAAIL,KAG/B,OAAOI,mCAED,IAAAK,EACiCnB,KAAKI,MAArCC,EADDc,EACCd,YAAaE,EADdY,EACcZ,gBACpB,OACIU,EAAA,qBAAKG,UAAU,YACXH,EAAA,qBAAKG,UAAU,qBACVpB,KAAKM,cAAc,IAExBW,EAAA,qBAAKG,UAAU,WACXH,EAAA,qBAAKG,UAAU,kBACVpB,KAAKM,cAAc,KAExBW,EAAA,qBAAKG,UAAU,oBACXH,EAAA,2BACAA,EAAA,4BAEJA,EAAA,qBAAKG,UAAU,mBACVpB,KAAKM,cAAc,KAExBW,EAAA,qBAAKG,UAAS,eAAAC,OAAiBd,IAC1BF,IAGTY,EAAA,qBAAKG,UAAU,kBACXH,EAAA,qBAAKG,UAAU,aACXH,EAAA,qBAAKG,UAAU,oBAAmBH,EAAA,oBAAIG,UAAU,cAAd,aAClCH,EAAA,qBAAKG,UAAU,6BAA4BH,EAAA,oBAAIG,UAAU,iBAAd,WAC3CH,EAAA,qBAAKG,UAAU,8BAA6BH,EAAA,oBAAIG,UAAU,iBAAd,WAC5CH,EAAA,qBAAKG,UAAU,wBAAuBH,EAAA,oBAAIG,UAAU,iBAAd,oBA9C3BE,aC2BpBC,qBAzBb,SAAAA,EAAY3B,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAuB,IACjB1B,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAyB,GAAApB,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXoB,QAAQ,GAJO3B,mFAOC,IAAA4B,EAAAzB,KAClB0B,OAAOC,iBAAiB,OAAQ,kBAAMF,EAAKG,SAAS,CAACJ,QAAQ,qDAGxC,IAAAK,EAAA7B,KACnB0B,OAAOI,oBAAoB,OAAQ,kBAAMD,EAAKD,SAAS,CAACJ,QAAQ,uCAKlE,OADiBxB,KAAKI,MAAfoB,OAEGO,EAAAC,EAAAC,cAACC,EAAD,MAEAH,EAAAC,EAAAC,cAAA,mBArBIE,cCIEC,QACW,cAA7BV,OAAOW,SAASC,UAEe,UAA7BZ,OAAOW,SAASC,UAEhBZ,OAAOW,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOV,EAAAC,EAAAC,cAACS,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.711a4e84.chunk.js","sourcesContent":["import * as React from 'react';\r\n\r\n// Stylings\r\nimport './Intro.scss';\r\n\r\nconst TRANSITION_CLASSNAME = 'active';\r\n\r\nexport default class Intro extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            horizontals: this.generateSpans(25, 1),\r\n            transitionClass: TRANSITION_CLASSNAME,\r\n            animCounter: 1\r\n        }\r\n    }\r\n    generateSpans(n, offset=0) {\r\n        const result = [];\r\n\r\n        for (let i = 0; i < n; i++) {\r\n            result.push(<span key={i + offset} />);\r\n        }\r\n\r\n        return result;\r\n    }\r\n    render () {\r\n        const {horizontals, transitionClass} = this.state;\r\n        return (\r\n            <div className=\"backdrop\">\r\n                <div className=\"backdrop-curtains\">\r\n                    {this.generateSpans(3)}\r\n                </div>\r\n                <div className=\"horizon\">\r\n                    <div className=\"verticals-left\">\r\n                        {this.generateSpans(12)}\r\n                    </div>\r\n                    <div className=\"verticals-center\">\r\n                        <span />\r\n                        <span />\r\n                    </div>\r\n                    <div className=\"verticals-right\">\r\n                        {this.generateSpans(12)}\r\n                    </div>\r\n                    <div className={`horizontals ${transitionClass}`}>\r\n                        {horizontals}\r\n                    </div>\r\n                </div>\r\n                <div className=\"text-container\">\r\n                    <div className=\"text-list\">\r\n                        <div className=\"text-frame title\"><h1 className=\"text-title\">THIS GUY</h1></div>\r\n                        <div className=\"text-frame subtitle1-left\"><h3 className=\"text-subtitle\">mentor</h3></div>\r\n                        <div className=\"text-frame subtitle1-right\"><h3 className=\"text-subtitle\">devops</h3></div>\r\n                        <div className=\"text-frame subtitle2\"><h3 className=\"text-subtitle\">codes</h3></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\n\n// Components\nimport Intro from './pages/Intro';\n\n// Styles\nimport './App.scss';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loaded: false\n    };\n  }\n  componentDidMount() {\n    window.addEventListener('load', () => this.setState({loaded: true}));\n  }\n\n  componentWillUnmount() {\n      window.removeEventListener('load', () => this.setState({loaded: true}));\n  }\n\n  render() {\n    const {loaded} = this.state;\n    if (loaded) {\n      return (<Intro />);\n    } else {\n      return (<div />);\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}